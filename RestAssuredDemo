configure RestAsssured:-

package in.amazon.RestAssuredDemo;

import org.junit.Assert;
import org.testng.annotations.Test;
import io.restassured.response.Response;


import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;

public class VerifyCurrencyName {

	@Test
	
	public void verifyCurrencyName() {
		Response response = RestAssured
				.when()
				      .get("https://restcountries.com/v3.1/name/japan")
				.then()
				       .extract().response();
		
		JsonPath jsonPath = response.jsonPath();
		
		Assert.assertTrue(jsonPath.get("[0].currencies.JPY.name").toString().equals("Japanese yen"));
		
	}
	
}


Get Response:-
package in.amazon.RestAssuredDemo;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class GETDemo {

	@Test
	
	public void getServerResponse() {
		
		RestAssured
		    .when()
		      .get("https://restcountries.com/v3.1/all")
		    .then()
		         .assertThat()
		         .statusCode(200)
		         .log().all();
		
	}
}

postresponse:-
package in.amazon.RestAssuredDemo;

import java.util.HashMap;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class POSTDemo {

	
	HashMap<String, String> map = new HashMap<String, String>();
	
	@BeforeMethod
	public void  createPayLoad() {
		map.put("name", "morpheus");
		map.put("job", "painter");
		RestAssured.baseURI = "https://reqres.in/";
		RestAssured.basePath = "/api/users";
	}
	
@Test

public void createResource() {
	RestAssured
	      .given()
	             .contentType("application/json")
	             .body(map)
	           .when()
	                 .post()
	            .then()
	                  .statusCode(201)
	                  .log().all();
}

}
	
	
put:-
package in.amazon.RestAssuredDemo;

import java.util.HashMap;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class PUTDemo {

	HashMap<String, String> map = new HashMap<String, String>();
	
	@BeforeMethod
	public void createPayload() {
		map.put("name", "morpheus");
		map.put("job", "programmer");
		RestAssured.baseURI = "https://reqres.in/";
		RestAssured.basePath = "/api/users/133";
		
	}
	@Test
	
	public void updateResource() {
		RestAssured
		       .given()
		              .contentType("application/json")
		              .body(map)
		        .when()
		              .put()
		        .then()
		              .statusCode(200)
		              .log().all();
	}
	
}

delete:-
package in.amazon.RestAssuredDemo;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class DELETEDemo {
	
	@Test
	
	public void deleteResource() {
		RestAssured.baseURI = "https://reqres.in/";
		RestAssured.basePath = "/api/users/133";
		
		RestAssured
		       .when()
		             .delete()
		       .then()
		             .statusCode(204);
		 
	}

}

Soap xml:-
package in.amazon.RestAssuredDemo;


import java.io.FileInputStream;
import java.io.IOException;
import java.io.File;

import org.apache.commons.io.IOUtils;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class SOAPDemo {
	
	@Test
	
	public void getCaptial() throws IOException {
		FileInputStream fis = new FileInputStream(new File("capitals.xml"));
		
		RestAssured.baseURI = "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL";
		
		RestAssured
		      .given()
		             .header("Content-Type","text/xml")
		             .body(IOUtils.toString(fis, "UTF-8"))
		        .when()
		            .post()
		        .then()
		               .statusCode(200)
		               .log().all();
		            
	}

}
capitalfile:-
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <CapitalCity xmlns="http://www.oorsprong.org/websamples.countryinfo">
      <sCountryISOCode>IN</sCountryISOCode>
    </CapitalCity>
  </soap:Body>
</soap:Envelope>




Authentications:

package in.amazon.RestAssuredDemo;

import java.util.HashMap;
import java.util.UUID;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class BearerTokenDemo {
	
	HashMap<String, String> map = new HashMap<String, String>();
	UUID uuid = UUID.randomUUID();
	
	@BeforeMethod
	public void createPayLoad() {
		map.put("name", "Meghana");
		map.put("email", uuid+"@gmail.com");
		map.put("gender", "female");
		map.put("status", "active");
		RestAssured.baseURI = "https://gorest.co.in/";
		RestAssured.basePath = "public/v2/users";
	}
 
	@Test
	
	public void createResource() {
		RestAssured
		        .given()
		              .contentType("application/json")
		              .body(map)
		              .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
		         .when()
		              .post()
		         .then()
		               .statusCode(201)
		               .log().all();
	

	}
}


package in.amazon.RestAssuredDemo;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class GETDemoBearerToken {

	@Test
	
	public void verifyResource() {
		RestAssured
		    .given()
		       .contentType("application/json")
		       .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
		    .when()
		         .get("https://gorest.co.in/public/v2/users/4495034")
		     .then()
		         .statusCode(200)
		         .log().all();
	}
	
	
}

package in.amazon.RestAssuredDemo;

import java.util.HashMap;

import org.junit.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class PUTDemoBearerToken {

	HashMap<String, String> map = new HashMap<>();
	
	@BeforeMethod
	public void createPayLoad() {
		map.put("name", "Meghana1");
		map.put("email", "battaganimeghana22@gmail.com");
		map.put("gender", "female");
		map.put("status", "active");
		RestAssured.baseURI = "https://gorest.co.in/";
		RestAssured.basePath = "public/v2/users/4495034";
	}
	
	@Test
	public void updateResource() {
	    Response response = RestAssured
		.given()
		     .contentType("application/json")
		     .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
		     .body(map)
		 .when()
		      .put()
		 .then()
		       .extract().response();
	    
	    JsonPath jsonPath = response.jsonPath();
	    Assert.assertTrue(jsonPath.get("name").toString().equals("Meghana1"));
	    
	}
}

API AUTHENTICATION
package in.amazon.RestAssuredDemo;

import org.testng.annotations.Test;

import io.restassured.RestAssured;

public class APIKeyDemo {

	
	@Test
	
	public void getWeatherInfo() {
		RestAssured
		      .given()
		           .param("q", "chennai")
		           .param("appid", "180705360f40337306e03113ffc60bd8")
		       .when()
		            .get("https://api.openweathermap.org/data/2.5/weather")
		        .then()
		              .statusCode(200)
		              .log().all();
	}
}


configuelog4j:we can see all 5 test as been passed by running all tests

package in.amazon.RestAssuredDemo;

import java.util.HashMap;
import java.util.UUID;

import org.junit.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import static org.hamcrest.Matchers.is;

public class Create_Update_Delete_Resource extends TestBase {
            
	HashMap<String, String> map = new HashMap<String, String>();
     
	UUID uuid = UUID.randomUUID();
	int id;
	Response response;
	JsonPath jsonPath;
	
	@Test(priority=0)
	public void createPayload() {
		map.put("name", "Captain Planet");
		map.put("email", uuid + "@gmail.com");
		map.put("gender", "male");
		map.put("status", "Active");
		RestAssured.baseURI = "https://gorest.co.in";
		RestAssured.basePath = "public/v2/users";
		logger.info("Payload created");
		
	}
  @Test(priority=1)
  
  public void createResource() {
	  response = RestAssured
			              .given()
			                     .contentType("application/json")
			                     .body(map)
			                     .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
			               .when()
			                     .post()
			               .then()
			                      
			                      .extract().response();
	  
	  logger.info("Resource Created Successfully");
	  jsonPath = response.jsonPath();
	  id = jsonPath.getInt("id");
	  System.out.println(id);
			                      
			                      
  }

@Test(priority=2)

public void verifyResource() {
	System.out.println("Id = " + id);
	RestAssured
    .given()
           .contentType("application/json")
           .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
     .when()
           .get("https://gorest.co.in/public/v2/users/"+id)
     .then()
             .statusCode(200);
          
	
	logger.info("Resource Verified");
           
	Assert.assertTrue(jsonPath.get("name").equals("Captain Planet"));


	
}

@Test(priority=3)

public void updateResource() {
	map.put("name", "Captain Planett");
	map.put("email", uuid + "@gmail.com");
	map.put("gender", "male");
	map.put("status", "Active");
	RestAssured.baseURI = "https://gorest.co.in";
	RestAssured.basePath = "public/v2/users/" + id;
	RestAssured
    .given()
           .contentType("application/json")
           .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
            .body(map)
     .when()
           .put()
           
     .then()
            .statusCode(200)
           
	         .assertThat()
	         .body("name", is("Captain Planett"));
	 logger.info("Resource Updated");
}
@Test(priority=4)
public void deleteResource() {
	RestAssured.baseURI = "https://gorest.co.in";
	RestAssured.basePath = "public/v2/users/" + id;
	RestAssured
    .given()
           .contentType("application/json")
           .header("Authorization", "Bearer 87fe5afaff9eef83ad7fa07f73f9a40753ba4d0362920389dae527ab890616ad")
           
     .when()
           .delete()
           
     .then()
            .statusCode(204);
	logger.info("Resource Deleted");
	
}
}

package in.amazon.RestAssuredDemo;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.testng.annotations.BeforeClass;

import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class TestBase {

	
	public static RequestSpecification httpRequest;
	public static Response response;
	
	public Logger logger;
	
	
	@BeforeClass
	public void setUp() {
		logger = Logger.getLogger("LogDemo");
		PropertyConfigurator.configure("log4j.properties");
		logger.setLevel(Level.DEBUG);
	}
}

log4jproperties:-
log4j.rootLogger=ERROR,stdout
log4j.logger.com.endeca=INFO
log4j.logger.LogDemo=DEBUG, dest1
# Logger for crawl metrics
log4j.logger.com.endeca.itl.web.metrics=INFO

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n

